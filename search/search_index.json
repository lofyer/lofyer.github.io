{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ReadTheDocs-DataNote/","text":"DataNote \u8fd9\u662f\u4e00\u672c\u5b66\u4e60\u7b14\u8bb0\uff0c\u5185\u5bb9\u6bd4\u8f83\u6742\uff0c\u5305\u62ec\u673a\u5668\u5b66\u4e60\u3001\u5916\u6c47\u91cf\u5316\u4ea4\u6613\u7b49\u3002\u914d\u5408\u7f51\u7ad9https://forex.fusionworks.cn \u5728\u7ebf\u9605\u8bfb Build pip3 install sphinx pip3 install textex pip3 install sphinx_rtd_theme ReadTheDocs: https://datanote.readthedocs.org","title":"Index"},{"location":"ReadTheDocs-DataNote/#datanote","text":"\u8fd9\u662f\u4e00\u672c\u5b66\u4e60\u7b14\u8bb0\uff0c\u5185\u5bb9\u6bd4\u8f83\u6742\uff0c\u5305\u62ec\u673a\u5668\u5b66\u4e60\u3001\u5916\u6c47\u91cf\u5316\u4ea4\u6613\u7b49\u3002\u914d\u5408\u7f51\u7ad9https://forex.fusionworks.cn","title":"DataNote"},{"location":"ReadTheDocs-DataNote/#_1","text":"","title":"\u5728\u7ebf\u9605\u8bfb"},{"location":"ReadTheDocs-DataNote/#build","text":"pip3 install sphinx pip3 install textex pip3 install sphinx_rtd_theme ReadTheDocs: https://datanote.readthedocs.org","title":"Build"},{"location":"blog/blogxx/","text":"BLOG haha","title":"Java"},{"location":"blog/blogxx/#blog","text":"haha","title":"BLOG"},{"location":"docs2/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Page3"},{"location":"docs2/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"docs2/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"docs2/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"docs2/bb/","text":"Welcome to MkDocs2 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs2"},{"location":"docs2/bb/#welcome-to-mkdocs2","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs2"},{"location":"docs2/bb/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"docs2/bb/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"docs2/ch01/","text":"\u7b2c\u4e00\u7ae0 \u6570\u636e\u6536\u96c6\u3001\u7edf\u8ba1 \u5728\u5f00\u59cb\u8fd9\u4e00\u7ae0\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8865\u4e60\u4e00\u4e0b\u6570\u5b66\u77e5\u8bc6\uff1b\u8fd8\u6709\u719f\u6089\u4e0b\u5e38\u89c1\u5de5\u5177\uff08\u8bed\u8a00\uff09\uff0c\u4e0d\u5fc5\u591a\u5e74\u5f00\u53d1\u7ecf\u9a8c\uff0c\u4f1a\u5904\u7406\u5e38\u89c1\u6570\u636e\u7ed3\u6784\u3001\u80fd\u683c\u5f0f\u5316\u6587\u4ef6\u5373\u53ef\u3002 \u5efa\u8bae\u5148\u901a\u8bfb\u4e00\u4e0b Scrapy \u4e2d\u6587\u6587\u6863 \uff0c\u8fd9\u6837\u4f60\u4f1a\u7701\u53bb\u597d\u591aGoogle\u7684\u65f6\u95f4\uff1b\u5728 \u77e5\u4e4e \u4e0a\u6709\u8bb8\u591a\u5173\u4e8e \u5927\u6570\u636e \u3001 \u6570\u636e\u6316\u6398 \u7684\u8ba8\u8bba\uff0c\u4f60\u53ef\u4ee5\u53bb\u770b\u770b\u4e86\u89e3\u4e00\u4e9b\u4e1a\u5185\u7684\u52a8\u6001\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528 Nutch \u6765\u722c\u53d6\uff0c\u5e76\u7528 Solr \u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u5b83\u4eec\u53ef\u4ee5\u8ddf\u4e0b\u4e00\u7ae0\u8282\u7684Hadoop\u96c6\u6210\u3002 \u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u70b9-- Model Thinking \uff0c\u4f60\u9700\u8981\u7684\u4e0d\u53ea\u662f\u5efa\u6a21\u7684\u77e5\u8bc6\uff0c\u8fd8\u8981\u6709\u5efa\u6a21\u7684\u601d\u60f3\u3002\u6570\u636e\u548c\u7b97\u6cd5\u5e76\u4e0d\u662f\u6700\u91cd\u8981\u7684\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5982\u4f55\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u901a\u8fc7\u4f60\u8bbe\u8ba1\u7684\u6a21\u578b\u6765\u8f93\u51fa\u5bf9\u4f60\u6709\u7528\u7684\u7ed3\u679c\u3002 \u4e0d\u8981\u4ee5\u7f16\u7a0b\u5f00\u59cb\u4f60\u7684\u673a\u5668\u5b66\u4e60\u4e4b\u65c5\uff0c\u8fd9\u6837\u5bb9\u6613\u4f7f\u601d\u7ef4\u53d7\u9650\u4e8e\u8bed\u8a00\uff0c\u901a\u8fc7\u5bf9\u6a21\u578b\u548c\u7ed3\u679c\u7684\u601d\u8003\u8fbe\u5230\u4f60\u7684\u76ee\u7684\uff0c\u7f16\u7a0b\u53ea\u662f\u624b\u6bb5\u4e4b\u4e00\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u5b66\u4f1a\u7684\u8bed\u8a00\u6709Python\u3001NetLogo\u3001MQL\uff0c\u989d\u5916\u7684\u8bed\u8a00\u4e3aBash\u3001C\u3001C++\uff0c\u5982\u679c\u4f60\u4f1a\u70b9Java\u90a3\u5c31\u66f4\u597d\u5566\u3002\u5982\u4f55\u5b66\u4e60\u5b83\u4eec\uff1fOK\uff0c\u4e0b\u8f7d\u624b\u518c\uff0c\u90a3\u4e9b\u547d\u4ee4\u4e0e\u7c7b\u578b\u4e00\u4e2a\u4e2a\u6572\u7740\u5b66\uff0c\u4e0d\u8981\u6f0f\u8fc7\u4efb\u4f55\u4e00\u4e2a\u3002R\u8bed\u8a00\u7684\u6548\u7387\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u5de5\u7a0b\u7c7b\u559c\u6b22Python\uff0c\u79d1\u5b66\u5bb6\u559c\u6b22S-Plus\uff0cR\u4e5f\u6d41\u884c\u3002 \u5efa\u6a21\u5de5\u5177\u8fd9\u5757\u513f\uff0c\u7b14\u8005\u8ba4\u4e3a\u6700\u9002\u5408\u4e2a\u4eba\u5b66\u4e60\u7684\u5f53\u5c5eNetlogo\uff0c\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\u6709\u53ef\u76f4\u63a5\u7528 GAMA \u6216\u8005 Mesa \uff0c\u4e5f\u6709\u5546\u4e1a\u4ea7\u54c1\u6bd4\u5982IBM SPSS\u3001AnyLogic\u7cfb\u5217\uff0c\u6a21\u62df\u80a1\u5e02\u7684\u4e5f\u6709 Altreva Adaptive Modeler \u3001 QLearning Trading \uff0c\u4f46\u662f\u3002\u3002\u3002\u6269\u5c55\u6027\u652f\u6301\u4e0aNetlogo\u7075\u6d3b\u800c\u591a\u6837\uff0c\u5982\u679c\u9700\u8981\u8d85\u7b97\u7248\u672c\u53ef\u4ee5\u4e5f\u53ef\u4ee5\u8bd5\u8bd5Repast\u3002 NetLogo: {download} netlogo_help.7z<../files/netlogo_help.7z> \u5982\u679c\u8bfb\u8005\u5df2\u7ecf\u5177\u5907\u4e86\u4ee5\u4e0b\u51e0\u70b9\u7684\u57fa\u672c\u77e5\u8bc6\uff0c\u90a3\u4e48\uff0c\u8df3\u8fc7\u8fd9\u7ae0\u5427\u3002 1.1 \u6570\u636e\u6536\u96c6 \u6570\u636e\u6536\u96c6\u662f\u5b66\u4e60\u6570\u636e\u5206\u6790\u7684\u5f00\u59cb\u3002 \u4e3a\u4e86\u7701\u53bb\u4e00\u4e9b\u5b66\u4e60\u7684\u9ebb\u70e6\uff0c\u6211\u627e\u4e86\u4e00\u4e9b \u201c\u5927\u201d\u6570\u636e \uff0c\u6709\u4e9b\u4e0a\u767eTB\u7684\u6570\u636e\u5bf9\u975e\u884c\u4e1a\u5185\u7684\u4eba\u6765\u8bf4\u53ef\u80fd\u6beb\u65e0\u610f\u4e49\uff0c\u4f46\u662f\uff0c\u5148\u6765\u4e9b\u6570\u636e\u5427\uff0c\u5b83\u4eec\u5bf9\u5b66\u4e60\u8005\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u5b9e\u7528\u7684\u3002 \u7b80\u5355\u6293\u53d6 \u52a8\u624b\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u722c\u866b \u5b9e\u9645\u4f7f\u7528\u65f6\u9047\u5230\u7684\u95ee\u9898 \u5206\u5e03\u5f0f\u6293\u53d6 scrapyd scrapy-redis \u4f7f\u7528Nutch + Solr 1.2 \u722c\u866b\u793a\u4f8b 58\u540c\u57ce \u6211\u7b80\u5355\u5199\u4e86\u4e00\u4e2a \u6536\u96c658\u540c\u57ce\u4e2d\u4e0a\u6d77\u51fa\u79df\u623f\u4fe1\u606f\u7684\u722c\u866b \uff0c\u5305\u62ec\u7684\u6761\u76ee\u6709\uff1a \u63cf\u8ff0 \u3001 \u4f4d\u7f6e \u3001 \u4ef7\u683c \u3001 \u623f\u95f4\u6570 \u3001 URL \u3002 \u7531\u4e8e\u8fd9\u4e9b\u4fe1\u606f\u90fd\u53ef\u4ee5\u5728\u5730\u56fe\u4e0a\u8868\u793a\u51fa\u6765\uff0c\u90a3\u6211\u9664\u4e86\u753b\u7edf\u8ba1\u56fe\u4ee5\u5916\u8fd8\u4f1a\u753b\u5b83\u4eec\u5728\u5730\u56fe\u4e0a\u7684\u8868\u793a\u3002 \u77e5\u4e4e http://blog.javachen.com/2014/06/08/using-scrapy-to-cralw-zhihu/ http://segmentfault.com/blog/javachen/1190000000583419 https://github.com/KeithYue/Zhihu_Spider.git \u65b0\u6d6a\u5fae\u535a https://github.com/followyourheart/sina-weibo-crawler 1.3 \u7edf\u8ba1\u5b66\u5173\u952e\u5b57","title":"Ch01"},{"location":"docs2/ch01/#_1","text":"\u5728\u5f00\u59cb\u8fd9\u4e00\u7ae0\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8865\u4e60\u4e00\u4e0b\u6570\u5b66\u77e5\u8bc6\uff1b\u8fd8\u6709\u719f\u6089\u4e0b\u5e38\u89c1\u5de5\u5177\uff08\u8bed\u8a00\uff09\uff0c\u4e0d\u5fc5\u591a\u5e74\u5f00\u53d1\u7ecf\u9a8c\uff0c\u4f1a\u5904\u7406\u5e38\u89c1\u6570\u636e\u7ed3\u6784\u3001\u80fd\u683c\u5f0f\u5316\u6587\u4ef6\u5373\u53ef\u3002 \u5efa\u8bae\u5148\u901a\u8bfb\u4e00\u4e0b Scrapy \u4e2d\u6587\u6587\u6863 \uff0c\u8fd9\u6837\u4f60\u4f1a\u7701\u53bb\u597d\u591aGoogle\u7684\u65f6\u95f4\uff1b\u5728 \u77e5\u4e4e \u4e0a\u6709\u8bb8\u591a\u5173\u4e8e \u5927\u6570\u636e \u3001 \u6570\u636e\u6316\u6398 \u7684\u8ba8\u8bba\uff0c\u4f60\u53ef\u4ee5\u53bb\u770b\u770b\u4e86\u89e3\u4e00\u4e9b\u4e1a\u5185\u7684\u52a8\u6001\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528 Nutch \u6765\u722c\u53d6\uff0c\u5e76\u7528 Solr \u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u5b83\u4eec\u53ef\u4ee5\u8ddf\u4e0b\u4e00\u7ae0\u8282\u7684Hadoop\u96c6\u6210\u3002 \u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u70b9-- Model Thinking \uff0c\u4f60\u9700\u8981\u7684\u4e0d\u53ea\u662f\u5efa\u6a21\u7684\u77e5\u8bc6\uff0c\u8fd8\u8981\u6709\u5efa\u6a21\u7684\u601d\u60f3\u3002\u6570\u636e\u548c\u7b97\u6cd5\u5e76\u4e0d\u662f\u6700\u91cd\u8981\u7684\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5982\u4f55\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u901a\u8fc7\u4f60\u8bbe\u8ba1\u7684\u6a21\u578b\u6765\u8f93\u51fa\u5bf9\u4f60\u6709\u7528\u7684\u7ed3\u679c\u3002 \u4e0d\u8981\u4ee5\u7f16\u7a0b\u5f00\u59cb\u4f60\u7684\u673a\u5668\u5b66\u4e60\u4e4b\u65c5\uff0c\u8fd9\u6837\u5bb9\u6613\u4f7f\u601d\u7ef4\u53d7\u9650\u4e8e\u8bed\u8a00\uff0c\u901a\u8fc7\u5bf9\u6a21\u578b\u548c\u7ed3\u679c\u7684\u601d\u8003\u8fbe\u5230\u4f60\u7684\u76ee\u7684\uff0c\u7f16\u7a0b\u53ea\u662f\u624b\u6bb5\u4e4b\u4e00\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u5b66\u4f1a\u7684\u8bed\u8a00\u6709Python\u3001NetLogo\u3001MQL\uff0c\u989d\u5916\u7684\u8bed\u8a00\u4e3aBash\u3001C\u3001C++\uff0c\u5982\u679c\u4f60\u4f1a\u70b9Java\u90a3\u5c31\u66f4\u597d\u5566\u3002\u5982\u4f55\u5b66\u4e60\u5b83\u4eec\uff1fOK\uff0c\u4e0b\u8f7d\u624b\u518c\uff0c\u90a3\u4e9b\u547d\u4ee4\u4e0e\u7c7b\u578b\u4e00\u4e2a\u4e2a\u6572\u7740\u5b66\uff0c\u4e0d\u8981\u6f0f\u8fc7\u4efb\u4f55\u4e00\u4e2a\u3002R\u8bed\u8a00\u7684\u6548\u7387\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u5de5\u7a0b\u7c7b\u559c\u6b22Python\uff0c\u79d1\u5b66\u5bb6\u559c\u6b22S-Plus\uff0cR\u4e5f\u6d41\u884c\u3002 \u5efa\u6a21\u5de5\u5177\u8fd9\u5757\u513f\uff0c\u7b14\u8005\u8ba4\u4e3a\u6700\u9002\u5408\u4e2a\u4eba\u5b66\u4e60\u7684\u5f53\u5c5eNetlogo\uff0c\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\u6709\u53ef\u76f4\u63a5\u7528 GAMA \u6216\u8005 Mesa \uff0c\u4e5f\u6709\u5546\u4e1a\u4ea7\u54c1\u6bd4\u5982IBM SPSS\u3001AnyLogic\u7cfb\u5217\uff0c\u6a21\u62df\u80a1\u5e02\u7684\u4e5f\u6709 Altreva Adaptive Modeler \u3001 QLearning Trading \uff0c\u4f46\u662f\u3002\u3002\u3002\u6269\u5c55\u6027\u652f\u6301\u4e0aNetlogo\u7075\u6d3b\u800c\u591a\u6837\uff0c\u5982\u679c\u9700\u8981\u8d85\u7b97\u7248\u672c\u53ef\u4ee5\u4e5f\u53ef\u4ee5\u8bd5\u8bd5Repast\u3002 NetLogo: {download} netlogo_help.7z<../files/netlogo_help.7z> \u5982\u679c\u8bfb\u8005\u5df2\u7ecf\u5177\u5907\u4e86\u4ee5\u4e0b\u51e0\u70b9\u7684\u57fa\u672c\u77e5\u8bc6\uff0c\u90a3\u4e48\uff0c\u8df3\u8fc7\u8fd9\u7ae0\u5427\u3002","title":"\u7b2c\u4e00\u7ae0 \u6570\u636e\u6536\u96c6\u3001\u7edf\u8ba1"},{"location":"docs2/ch01/#11","text":"\u6570\u636e\u6536\u96c6\u662f\u5b66\u4e60\u6570\u636e\u5206\u6790\u7684\u5f00\u59cb\u3002 \u4e3a\u4e86\u7701\u53bb\u4e00\u4e9b\u5b66\u4e60\u7684\u9ebb\u70e6\uff0c\u6211\u627e\u4e86\u4e00\u4e9b \u201c\u5927\u201d\u6570\u636e \uff0c\u6709\u4e9b\u4e0a\u767eTB\u7684\u6570\u636e\u5bf9\u975e\u884c\u4e1a\u5185\u7684\u4eba\u6765\u8bf4\u53ef\u80fd\u6beb\u65e0\u610f\u4e49\uff0c\u4f46\u662f\uff0c\u5148\u6765\u4e9b\u6570\u636e\u5427\uff0c\u5b83\u4eec\u5bf9\u5b66\u4e60\u8005\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u5b9e\u7528\u7684\u3002","title":"1.1 \u6570\u636e\u6536\u96c6"},{"location":"docs2/ch01/#_2","text":"","title":"\u7b80\u5355\u6293\u53d6"},{"location":"docs2/ch01/#_3","text":"","title":"\u52a8\u624b\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u722c\u866b"},{"location":"docs2/ch01/#_4","text":"","title":"\u5b9e\u9645\u4f7f\u7528\u65f6\u9047\u5230\u7684\u95ee\u9898"},{"location":"docs2/ch01/#_5","text":"","title":"\u5206\u5e03\u5f0f\u6293\u53d6"},{"location":"docs2/ch01/#scrapyd","text":"","title":"scrapyd"},{"location":"docs2/ch01/#scrapy-redis","text":"","title":"scrapy-redis"},{"location":"docs2/ch01/#nutch-solr","text":"","title":"\u4f7f\u7528Nutch + Solr"},{"location":"docs2/ch01/#12","text":"","title":"1.2 \u722c\u866b\u793a\u4f8b"},{"location":"docs2/ch01/#58","text":"\u6211\u7b80\u5355\u5199\u4e86\u4e00\u4e2a \u6536\u96c658\u540c\u57ce\u4e2d\u4e0a\u6d77\u51fa\u79df\u623f\u4fe1\u606f\u7684\u722c\u866b \uff0c\u5305\u62ec\u7684\u6761\u76ee\u6709\uff1a \u63cf\u8ff0 \u3001 \u4f4d\u7f6e \u3001 \u4ef7\u683c \u3001 \u623f\u95f4\u6570 \u3001 URL \u3002 \u7531\u4e8e\u8fd9\u4e9b\u4fe1\u606f\u90fd\u53ef\u4ee5\u5728\u5730\u56fe\u4e0a\u8868\u793a\u51fa\u6765\uff0c\u90a3\u6211\u9664\u4e86\u753b\u7edf\u8ba1\u56fe\u4ee5\u5916\u8fd8\u4f1a\u753b\u5b83\u4eec\u5728\u5730\u56fe\u4e0a\u7684\u8868\u793a\u3002","title":"58\u540c\u57ce"},{"location":"docs2/ch01/#_6","text":"http://blog.javachen.com/2014/06/08/using-scrapy-to-cralw-zhihu/ http://segmentfault.com/blog/javachen/1190000000583419 https://github.com/KeithYue/Zhihu_Spider.git","title":"\u77e5\u4e4e"},{"location":"docs2/ch01/#_7","text":"https://github.com/followyourheart/sina-weibo-crawler","title":"\u65b0\u6d6a\u5fae\u535a"},{"location":"docs2/ch01/#13","text":"","title":"1.3 \u7edf\u8ba1\u5b66\u5173\u952e\u5b57"},{"location":"docs2/ch02/","text":"\u7b2c\u4e8c\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840 2.1 numpy \u5feb\u67e5 import numpy as np a = np.arange(1,5) data_type = [('name','S10'), ('height', 'float'), ('age', int)] values = [('Arthur', 1.8, 41), ('Lancelot', 1.9, 38), ('Galahad', 1.7, 38)] b = np.array(values, dtype=data_type) c = np.arange(6,10) # \u7b26\u53f7 np.sign(a) # \u6570\u7ec4\u6700\u5927\u503c a.max() # \u6570\u7ec4\u6700\u5c0f\u503c a.max() # \u533a\u95f4\u5cf0\u5cf0\u503c a.ptp() # \u4e58\u79ef a.prod() # \u7d2f\u79ef a.cumprod() # \u5e73\u5747\u503c a.mean() # \u4e2d\u503c a.median() # \u5dee\u5206 np.diff(a) # \u65b9\u5dee np.var(a) # \u5143\u7d20\u6761\u4ef6\u67e5\u627e\uff0c\u8fd4\u56deindex\u7684array np.where(a>2) # \u8fd4\u56de\u7b2c2\uff0c3\uff0c5\u4e2a\u5143\u7d20\u7684array np.take(a, np.array(1,2,4)) # \u6392\u5e8f np.msort(a) np.sort(b, kind='mergesort', order='height') # \u5747\u5206\uff0c\u5947\u6570\u4e2a\u5143\u7d20\u7684array\u4e0d\u53ef\u5206\u5272\u4e3a\u5076\u6570\u3002 np.split(b,2) # \u521b\u5efa\u5355\u4f4d\u77e9\u9635 np.eye(3) # \u6700\u5c0f\u4e8c\u4e58\uff0c\u53c2\u6570\u4e3a[x,y,degree]\uff0cdegree\u4e3a\u591a\u9879\u5f0f\u7684\u6700\u9ad8\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6240\u6709\u6b21\u5e42\u7684\u7cfb\u6570 np.polyfit(a,c,1) 2.2 \u76d1\u7763\u5b66\u4e60 \u4fe1\u606f\u5206\u7c7b\u57fa\u7840 \u4fe1\u606f\u7684\u4e0d\u7a33\u5b9a\u6027\u4e3a\u71b5\uff08entropy\uff09\uff0c\u800c\u4fe1\u606f\u589e\u76ca\u4e3a\u6709\u65e0\u6837\u672c\u7279\u5f81\u5bf9\u5206\u7c7b\u95ee\u9898\u5f71\u54cd\u7684\u5927\u5c0f\u3002\u6bd4\u5982\uff0c\u629b\u786c\u5e01\u6b63\u53cd\u4e24\u9762\u5404\u670950%\u6982\u7387\uff0c\u6b64\u65f6\u4e0d\u7a33\u5b9a\u6027\u6700\u5927\uff0c\u71b5\u4e3a1\uff1b\u592a\u9633\u660e\u5929\u7167\u5e38\u5347\u8d77\uff0c\u5219\u662f\u5fc5\u7136\uff0c\u6b64\u4e8b\u4e0d\u7a33\u5b9a\u6027\u6700\u5c0f\uff0c\u71b5\u4e3a0\u3002 \u5047\u8bbe\u4e8b\u4ef6X\uff0c\u53d1\u751f\u6982\u7387\u4e3ax\uff0c\u5176\u4fe1\u606f\u671f\u671b\u503c\u5b9a\u4e49\u4e3a\uff1a l(X) = -log_2 x \u6574\u4e2a\u4fe1\u606f\u7684\u71b5\u4e3a\uff1a \\[ H = -\\sum^n_{i=1} log_2 x \\] \u5982\u4f55\u627e\u5230\u6700\u597d\u7684\u5206\u7c7b\u7279\u5f81\uff1a def chooseBestFeatureToSplit(dataSet): numFeatures = len(dataSet[0]) - 1 #the last column is used for the labels baseEntropy = calcShannonEnt(dataSet) bestInfoGain = 0.0; bestFeature = -1 for i in range(numFeatures): #iterate over all the features featList = [example[i] for example in dataSet]#create a list of all the examples of this feature uniqueVals = set(featList) #get a set of unique values newEntropy = 0.0 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) prob = len(subDataSet)/float(len(dataSet)) newEntropy += prob * calcShannonEnt(subDataSet) infoGain = baseEntropy - newEntropy #calculate the info gain; ie reduction in entropy if (infoGain > bestInfoGain): #compare this to the best gain so far bestInfoGain = infoGain #if better than current best, set to best bestFeature = i return bestFeature #returns an integer \u5176\u4e2d\uff0cdataSet\u4e3a\u6240\u6709\u7279\u5f81\u5411\u91cf\uff0ccaclShannonEnt()\u8ba1\u7b97\u7279\u5f81\u5411\u91cf\u7684\u71b5\uff0csplitDataSet()\u5207\u9664\u5411\u91cf\u4e2d\u7684value\u5217\uff1binfoGain\u5373\u4e3a\u4fe1\u606f\u589e\u76ca\uff0cchooseBestFeatureToSplit\u8fd4\u56de\u6700\u597d\u7684\u7279\u5f81\u5411\u91cf\u7d22\u5f15\u503c\u3002 K\u90bb\u8fd1\u7b97\u6cd5 kNN\u7684\u7b97\u6cd5\u6a21\u578b\u5982\u4e0b\uff1a \u5bf9\u4e8e\u672a\u77e5\u7c7b\u522b\u5c5e\u6027\u7684\u6570\u636e\u4e14\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f9d\u6b21\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8ba1\u7b97\u5df2\u77e5\u7c7b\u522b\u6570\u636e\u96c6\u4e2d\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb \u6309\u7167\u8ddd\u79bb\u9012\u589e\u4f9d\u6b21\u6392\u5e8f \u9009\u53d6\u4e0e\u5f53\u524d\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684k\u4e2a\u70b9 \u786e\u5b9a\u524dk\u4e2a\u70b9\u6240\u5728\u7c7b\u522b\u7684\u51fa\u73b0\u9891\u7387 \u8fd4\u56de\u524dk\u4e2a\u70b9\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u7c7b\u522b\u4f5c\u4e3a\u5f53\u524d\u70b9\u7684\u9884\u6d4b\u5206\u7c7b \u4ee3\u7801\u53c2\u8003\u5982\u4e0b\uff1a def classify0(inX, dataSet, labels, k): dataSetSize = dataSet.shape[0] diffMat = tile(inX, (dataSetSize,1)) - dataSet sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) distances = sqDistances**0.5 sortedDistIndicies = distances.argsort() classCount={} for i in range(k): voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] \u5176\u4e2d\uff0cinX\u4e3a\u8f93\u5165\u5411\u91cf\uff0cdataSet\u4e3a\u6570\u636e\u96c6\uff0clabels\u4e3a\u6570\u636e\u96c6\u7684\u5206\u7c7b\uff0c\u53ef\u8c03\u3002\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\u4e3ad0 = ((x-x0)**2 + (y-y0)**2)**0.5\u3002 \u6b64\u79cd\u7b97\u6cd5\u7684\u4f18\u70b9\u4e3a\u7cbe\u5ea6\u9ad8\u3001\u5bf9\u5f02\u5e38\u503c\u4e0d\u654f\u611f\u3001\u4f46\u7f3a\u70b9\u4e5f\u6bd4\u8f83\u660e\u663e\uff0c\u5373\u6570\u636e\u91cf\u5927\u65f6\u5f00\u652f\u76f8\u5bf9\u8f83\u5927\uff0c\u9002\u7528\u4e8e\u6570\u503c\uff0d\u6807\u79f0\u578b\u6570\u636e\u3002 \u51b3\u7b56\u6811 \u51b3\u7b56\u6811\u5373\u5217\u51fa\u4e00\u7cfb\u5217\u9009\u62e9\uff0c\u6839\u636e\u8bad\u7ec3\u96c6\u4e2d\u7684\u5927\u91cf\u5f62\u4f3c\uff08A\u3001B\u3001C\uff09\u4ee5\u53ca\u7ed3\u679cD\u7684\u5411\u91cf\u6765\u9884\u6d4b\u65b0\u8f93\u5165\uff08A'\u3001B'\u3001C'\uff09\u7684\u7ed3\u679cD'\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811\uff1a def createTree(dataSet,labels): classList = [example[-1] for example in dataSet] if classList.count(classList[0]) == len(classList): return classList[0] #stop splitting when all of the classes are equal if len(dataSet[0]) == 1: #stop splitting when there are no more features in dataSet return majorityCnt(classList) bestFeat = chooseBestFeatureToSplit(dataSet) bestFeatLabel = labels[bestFeat] myTree = {bestFeatLabel:{}} del(labels[bestFeat]) featValues = [example[bestFeat] for example in dataSet] uniqueVals = set(featValues) for value in uniqueVals: subLabels = labels[:] #copy all of labels, so trees don't mess up existing labels myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value),subLabels) return myTree \u627e\u5230\u5f71\u54cd\u6700\u5927\u7684\u7279\u5f81bestFeat\u540e\uff0c\u518d\u521b\u5efa\u6b64\u7279\u5f81\u4e0b\u7684\u5206\u7c7b\u5411\u91cf\u521b\u5efa\u5b50\u6811\u5411\u91cf\uff0c\u7136\u540e\u5c06bestFeat\u5206\u79bb\u540e\u7ee7\u7eed\u8fed\u4ee3\uff0c\u76f4\u81f3\u6240\u6709\u7279\u5f81\u90fd\u8f6c\u6362\u6210\u51b3\u7b56\u8282\u70b9\u3002 \u539f\u59cb\u6570\u636e\u6bd4\u5982\uff1a no-surfacing flippers fish 1 yes yes yes 2 yes yes yes 3 yes no no 4 no yes no 5 no yes no \u4f1a\u751f\u6210\u5982\u4e0b\u51b3\u7b56\u6811\uff1a no-surfacing? / \\ no/ \\yes fish(no) flippers? / \\ no/ \\yes fish(no) fish(yes) \u8868\u793a\u6210JSON\u683c\u5f0f\uff0c\u5373python\u5b57\u5178\uff1a {'no surfacing':{0:'no',1:{'flippers':{0:'no',1:'yes'}}} \u6784\u5efa\u51b3\u7b56\u6811\u7684\u65b9\u6cd5\u6bd4\u8f83\u591a\uff0c\u4e5f\u53ef\u4f7f\u7528C4.5\u548cCART\u7b97\u6cd5\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u5206\u7c7b\uff1a def classify(inputTree,featLabels,testVec): firstStr = inputTree.keys()[0] secondDict = inputTree[firstStr] featIndex = featLabels.index(firstStr) key = testVec[featIndex] valueOfFeat = secondDict[key] if isinstance(valueOfFeat, dict): classLabel = classify(valueOfFeat, featLabels, testVec) else: classLabel = valueOfFeat return classLabel \u5176\u4e2d\uff0cfeatLabels\u4e3a\u6d4b\u8bd5\u7684\u5224\u65ad\u8282\u70b9\uff0c\u5373\u7279\u5f81\uff0ctestVec\u4e3a\u5176\u503c\uff0c\u6bd4\u5982classify[myTree,\"['no-surfacing','flippers']\",:[1,1]\"]\uff0c\u5982\u6b64\u7ed3\u679c\u4fbf\u4e3a'no'\u3002 \u4f7f\u7528pickle\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u5e8f\u5217\u5316\u5b58\u50a8\uff1a def storeTree(inputTree,filename): import pickle fw = open(filename,'w') pickle.dump(inputTree,fw) fw.close() \u5176\u4e2d\uff0cdump\u53ef\u9009\u534f\u8bae\u4e3a0\uff08ASCII\uff09\uff0c1\uff08BINARY\uff09\uff0c\u9ed8\u8ba4\u4e3a0\uff1b\u8bfb\u53d6\u65f6\u4f7f\u7528pickle.load\uff1b\u540c\u6837\u53ef\u4f7f\u7528dumps\uff0cloads\u76f4\u63a5\u5bf9\u5b57\u7b26\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002 \u6b64\u79cd\u7b97\u6cd5\u8ba1\u7b97\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u5bf9\u4e2d\u95f4\u503c\u7f3a\u5931\u4e0d\u654f\u611f\uff0c\u4f46\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fc7\u62df\u5408\u7684\u95ee\u9898\u3002 \u6734\u7d20\u8d1d\u53f6\u65af \u8d1d\u53f6\u65af\u6a21\u578b\u662f\u57fa\u4e8e\u72ec\u7acb\u6982\u7387\u7edf\u8ba1\u7684\uff0c\u601d\u60f3\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff1a \u603b\u51717\u4e2a\u77f3\u5b50\u5728A\u3001B\u4e24\u4e2a\u6876\u4e2d\uff0cA\u6876\u4e2d\u67092\u9ed12\u767d\uff0cB\u6876\u4e2d\u67092\u9ed11\u767d\u3002\u5df2\u77e5\u6761\u4ef6\u4e3a\u77f3\u5b50\u6765\u81eaB\u6876\uff0c\u90a3\u4e48\u5b83\u662f\u767d\u8272\u77f3\u5b50\u7684\u6982\u7387\u53ef\u8868\u793a\u4e3a\uff1a P(white|B)=P(B|white)P(white)/P(B) \u63a5\u4e0b\u6765\uff0c\u5b9a\u4e49\u4e24\u4e2a\u4e8b\u4ef6A\u3001B\uff0cP(A|B)\u4e0eP(B|A)\u76f8\u4e92\u8f6c\u5316\u7684\u8fc7\u7a0b\u5373\u4e3a\uff1a P(B|A)=P(A|B)P(B)/P(A) \u800c\u6734\u7d20\u8d1d\u53f6\u65af\u53ef\u4ee5\u8fd9\u6837\u63cf\u8ff0\uff1a \u8bbex={a1,a2,...,am}\u4e3a\u5f85\u5206\u7c7b\u9879\uff0ca\u4e3ax\u7684\u7279\u5f81\u5c5e\u6027\uff0c\u7c7b\u522b\u96c6\u5408\u4e3aC={y1,y2,...,ym}\uff0c\u5982\u679cP(yk|x)=max(P(y1|x),P(y2|x),...,P(yn|x))\uff0c\u5219x\u5c5e\u4e8eyk\u3002 \u6574\u4e2a\u7b97\u6cd5\u6838\u5fc3\u5373\u662f\u7b49\u5f0fP(yi|x)=P(x|yi)P(yi)/P(x)\u3002 \u9996\u5148\u6784\u5efa\u4e00\u4e2a\u5206\u7c7b\u8bad\u7ec3\u51fd\u6570\uff08\u4e8c\u5143\u5206\u7c7b\uff09\uff1a def trainNB0(trainMatrix,trainCategory): numTrainDocs = len(trainMatrix) numWords = len(trainMatrix[0]) pBad = sum(trainCategory)/float(numTrainDocs) p0Num = ones(numWords); p1Num = ones(numWords) #change to ones() p0Denom = 2.0; p1Denom = 2.0 #change to 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: p1Num += trainMatrix[i] p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) p1Vect = log(p1Num/p1Denom) #change to log() p0Vect = log(p0Num/p0Denom) #change to log() return p0Vect,p1Vect,pBad \u5176\u4e2d\uff0ctrainMatrix\u4e3a\u6240\u6709\u8bad\u7ec3\u96c6\u4e2d\u7684\u5e03\u5c14\u5411\u91cf\uff0c\u6bd4\u5982\u4e24\u672c\u4e66A\u3001B\uff0c\u5176\u4e2dA\u6709\u4e24\u4e2a\u5355\u8bcdx\u3001y\uff0cB\u6709\u4e24\u4e2a\u5355\u8bcdx\u3001z\uff0c\u5e76\u4e14A\u662f\u597d\u4e66\uff08\u503c\u8ba1\u4e3a0\uff09\uff0cB\u662f\u70c2\u4e66\uff08\u503c\u8ba1\u4e3a0\uff09\uff0c\u628a\u6240\u6709\u5355\u8bcd\u8fdb\u884c\u6392\u5e8f\u540e\u5f97\u5411\u91cf['x','y','z']\uff0c\u5219A\u7684Matrix\u53ef\u8868\u793a\u4e3a[1,1,0]\uff0cB\u7684\u4e3a[1,0,1]\uff0c\u6240\u4ee5\u6b64\u51fd\u6570\u4e2d\u7684trainMatrix\u5373[[1,1,0],[1,0,1]]\uff0ctrainCategory\u4e3a[0,1]\u3002 \u51fd\u6570\u8fd4\u56de\u7684\u4e3a\u6982\u7387\u96c6\u7684\u5411\u91cf\u3002 \u5206\u7c7b\u51fd\u6570\uff1a def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1): p1 = sum(vec2Classify * p1Vec) + log(pClass1) #element-wise mult p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1) if p1 > p0: return 1 else: return 0 vec2Classify\u5373\u4e3a\u8981\u5206\u7c7b\u7684\u5411\u91cf\uff0c\u5f62\u5982trainMatrix\uff0c\u968f\u540e\u7684\u4e09\u4e2a\u53c2\u6570\u4e3atrainNB0\u6240\u8fd4\u56de\u3002p1\u3001p0\u53ef\u4ee5\u7406\u89e3\u4e3a\u671f\u671b\u6982\u7387\u503c\uff0c\u6bd4\u8f83\u4e24\u8005\u5927\u5c0f\u5373\u53ef\u5212\u5206\u3002 \u6d4b\u8bd5\u7528\u4f8b\uff1a def testingNB(): listOPosts,listClasses = loadDataSet() myVocabList = createVocabList(listOPosts) trainMat=[] for postinDoc in listOPosts: trainMat.append(setOfWords2Vec(myVocabList, postinDoc)) p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses)) testEntry = ['love', 'my', 'dalmation'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) testEntry = ['stupid', 'garbage'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) \u6574\u4f53\u6765\u8bf4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u65b9\u6cd5\u5728\u6570\u636e\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u662f\u5bf9\u6570\u636e\u8f93\u5165\u6bd4\u8f83\u654f\u611f\u3002 Logistic\u56de\u5f52 \u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u7ebf\u6027\u56de\u5f52\u662f\u5229\u7528\u79f0\u4e3a\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u7684\u6700\u5c0f\u4e8c\u4e58\u51fd\u6570\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u8fdb\u884c\u5efa\u6a21\u7684\u4e00\u79cd\u56de\u5f52\u5206\u6790\u3002\u8fd9\u79cd\u51fd\u6570\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u79f0\u4e3a\u56de\u5f52\u7cfb\u6570\u7684\u6a21\u578b\u53c2\u6570\u7684\u7ebf\u6027\u7ec4\u5408\u3002\u53ea\u6709\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u60c5\u51b5\u79f0\u4e3a\u7b80\u5355\u56de\u5f52\uff0c\u5927\u4e8e\u4e00\u4e2a\u81ea\u53d8\u91cf\u60c5\u51b5\u7684\u53eb\u505a\u591a\u5143\u56de\u5f52\u3002\uff08 \u7ef4\u57fa\u767e\u79d1 \uff09 \u5148\u4ecb\u7ecd\u4e24\u4e2a\u91cd\u8981\u7684\u6570\u5b66\u6982\u5ff5\u3002 \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5219 \u6700\u5c0f\u4e8c\u4e58\u6cd5\uff08\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5\uff09\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f\u3002\u5b83\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002 \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e\uff0c\u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f\u3002 \u793a\u4f8b1 \u6709\u56db\u4e2a\u6570\u636e\u70b9(1,6)\u3001(2,5)\u3001(3,7)\u3001(4,10)\uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u6761\u76f4\u7ebfy=a+bx\u4e0e\u8fd9\u56db\u4e2a\u70b9\u6700\u5339\u914d\u3002 a+1b=6 a+2b=5 a+3b=7 a+4b=10 \u91c7\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u4f7f\u7b49\u53f7\u4e24\u8fb9\u7684\u65b9\u5dee\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e5f\u5c31\u662f\u627e\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff1a S(a,b) = [6-(a+1b)]^2+[5-(a+2b)]^2+[7-(a+3b)]^2+[10-(a+4b)]^2 \u7136\u540e\u5bf9S(a,b)\u6c42a,b\u7684\u504f\u5bfc\u6570\uff0c\u4f7f\u5176\u4e3a0\u5f97\u5230\uff1a \\cfrac{{\\partial}S}{{\\partial}a} = 0 = 8a+20b-56 \\cfrac{{\\partial}S}{{\\partial}b} = 0 = 20a+60b-154 \u8fd9\u6837\u5c31\u89e3\u51fa\uff1a a=3.5,b=1.4 \u6240\u4ee5\u76f4\u7ebfy=3.5+1.4x\u662f\u6700\u4f73\u7684\u3002 \u51fd\u6570\u8868\u793a \\min_{\\vec{b}}{\\sum^n_{i=1}}(y_m-y_i)^2 \u6b27\u51e0\u91cc\u5fb7\u8868\u793a \\min_{ \\vec{b} } \\| \\vec{y}_{m} ( \\vec{b} ) - \\vec{y} \\|_{2} \u7ebf\u6027\u51fd\u6570\u6a21\u578b \u5178\u578b\u7684\u4e00\u7c7b\u51fd\u6570\u6a21\u578b\u662f\u7ebf\u6027\u51fd\u6570\u6a21\u578b\u3002\u6700\u7b80\u5355\u7684\u7ebf\u6027\u5f0f\u662f y = b_0 + b_1 t \u5199\u6210\u77e9\u9635\u5f0f\uff0c\u4e3a \\min_{b_0,b_1}\\left\\|\\begin{pmatrix}1 & t_1 \\\\ \\vdots & \\vdots \\\\ 1 & t_n \\end{pmatrix}\\begin{pmatrix} b_0\\\\ b_1\\end{pmatrix} - \\begin{pmatrix} y_1 \\\\ \\vdots \\\\ y_{n}\\end{pmatrix}\\right\\|_{2} = \\min_b\\|Ab-Y\\|_2 \u76f4\u63a5\u7ed9\u51fa\u8be5\u5f0f\u7684\u53c2\u6570\u89e3\uff1a b_1 = \\frac{\\sum_{i=1}^n t_iy_i - n \\cdot \\bar t \\bar y}{\\sum_{i=1}^n t_i^2- n \\cdot (\\bar t)^2} b_0 = \\bar y - b_1 \\bar t \u5176\u4e2d \\bar t = \\frac{1}{n} \\sum_{i=1}^n t_i \u4e3at\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\u3002\u4e5f\u53ef\u89e3\u5f97\u5982\u4e0b\u5f62\u5f0f\uff1a b_1 = \\frac{\\sum_{i=1}^n (t_i - \\bar t)(y_i - \\bar y)}{\\sum_{i=1}^n (t_i - \\bar t)^2} \u793a\u4f8b2 \u968f\u673a\u9009\u5b9a10\u8258\u6218\u8230\uff0c\u5e76\u5206\u6790\u5b83\u4eec\u7684\u957f\u5ea6\u4e0e\u5bbd\u5ea6\uff0c\u5bfb\u627e\u5b83\u4eec\u957f\u5ea6\u4e0e\u5bbd\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u7531\u4e0b\u9762\u7684\u63cf\u70b9\u56fe\u53ef\u4ee5\u76f4\u89c2\u5730\u770b\u51fa\uff0c\u4e00\u8258\u6218\u8230\u7684\u957f\u5ea6\uff08t\uff09\u4e0e\u5bbd\u5ea6\uff08y\uff09\u57fa\u672c\u5448\u7ebf\u6027\u5173\u7cfb\u3002\u6563\u70b9\u56fe\u5982\u4e0b\uff1a ```{image} ../images/04-02.png :align: center \u4ee5\u4e0b\u56fe\u8868\u5217\u51fa\u4e86\u5404\u6218\u8230\u7684\u6570\u636e\uff0c\u968f\u540e\u6b65\u9aa4\u662f\u91c7\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u786e\u5b9a\u4e24\u53d8\u91cf\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u3002 ```{image} ../images/04-03.png :align: center \u4eff\u7167\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50 \\bar t = \\frac {\\sum_{i=1}^n t_i}{n} = \\frac {1678}{10} = 167{.}8 \u5e76\u5f97\u5230\u76f8\u5e94\u7684 \\bar y = 18{.}41 \u7136\u540e\u786e\u5b9ab1 b_1 = \\frac{\\sum_{i=1}^n (t_i- \\bar {t})(y_i - \\bar y)}{\\sum_{i=1}^n (t_i- \\bar t)^2} = \\frac{3287{.}820} {20391{.}60} = 0{.}1612 \\; \u53ef\u4ee5\u770b\u51fa\uff0c\u6218\u8230\u7684\u957f\u5ea6\u6bcf\u53d8\u53161m\uff0c\u76f8\u5bf9\u5e94\u7684\u5bbd\u5ea6\u4fbf\u8981\u53d8\u531616cm\u3002\u5e76\u7531\u4e0b\u5f0f\u5f97\u5230\u5e38\u6570\u9879b0\uff1a b_0 = \\bar y - b_1 \\bar t = 18{.}41 - 0{.}1612 \\cdot 167{.}8 = -8{.}6394 \u53ef\u4ee5\u770b\u51fa\u70b9\u7684\u62df\u5408\u975e\u5e38\u597d\uff0c\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u76f8\u5173\u6027\u5927\u7ea6\u4e3a96.03\uff05\u3002 \u5229\u7528Matlab\u5f97\u5230\u62df\u5408\u76f4\u7ebf\uff1a ```{image} ../images/04-04.png :align: center **Sigmoid\u51fd\u6570** Sigmoid\u51fd\u6570\u5177\u6709\u5355\u4f4d\u9636\u8dc3\u51fd\u6570\u7684\u6027\u8d28\uff0c\u516c\u5f0f\u8868\u793a\u4e3a\uff1a ```{math} \\sigma (z)=\\cfrac{1}{1+e^{-z}} ```{image} ../images/04-01.png :align: center \u6211\u4eec\u5c06\u8f93\u5165\u8bb0\u4e3az\uff0c\u6709\u4e0b\u9762\u7684\u516c\u5f0f\u5f97\u51fa\uff1a ```{math} z=w_0 x_0 + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u4f7f\u7528\u5411\u91cf\u5199\u6cd5\uff1a z=w^T x \u5176\u4e2d\u5411\u91cfx\u662f\u5206\u7c7b\u5668\u7684\u8f93\u5165\u6570\u636e\uff0c\u5411\u91cfw\u5c31\u662f\u6211\u4eec\u8981\u627e\u5230\u7684\u6700\u4f73\u7cfb\u6570\u3002 \u57fa\u4e8e\u4f18\u5316\u65b9\u6cd5\u786e\u5b9a\u56de\u5f52\u7cfb\u6570 \u68af\u5ea6\u4e0a\u5347/\u4e0b\u964d\u6cd5 \u68af\u5ea6\u4e0a\u5347\u6cd5/\u4e0b\u964d\u6cd5\u7684\u601d\u60f3\u662f\uff1a\u8981\u627e\u5230\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u6cbf\u7740\u8be5\u51fd\u6570\u7684\u68af\u5ea6\u65b9\u5411\u63a2\u5bfb\uff0c\u51fd\u6570f(x,y)\u7684\u68af\u5ea6\u5982\u4e0b\u8868\u793a\uff1a {\\nabla}f(x,y)=\\begin{pmatrix} \\cfrac{{\\partial}f(x,y)}{{\\partial}x} \\\\ \\cfrac{{\\partial}f(x,y)}{{\\partial}y}\\end{pmatrix} \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u6b64\u7b97\u6cd5\uff1a \u4ece\u524d\u6709\u4e00\u5ea7\u5c71\uff0c\u4e00\u4e2a\u61d2\u4eba\u8981\u722c\u5c71\uff0c\u4ed6\u4ece\u5c71\u811a\u4e0b\u7684\u4efb\u610f\u4f4d\u7f6e\u5411\u5c71\u9876\u51fa\u53d1\uff0c\u5e76\u4e14\u77e5\u9053\u7b49\u9ad8\u7ebf\u56fe\u7684\u6bcf\u4e2a\u73af\u4e0a\u90fd\u6709\u4e00\u4e2a\u5bbf\u8425\u70b9\uff0c\u4ed6\u5e0c\u671b\u5728\u8fd9\u4e9b\u5bbf\u8425\u70b9\u4e4b\u95f4\u4fee\u5efa\u4e00\u6761\u7b14\u76f4\u7684\u8def\uff0c\u5e76\u4e14\u8def\u5230\u4e24\u65c1\u7684\u5bbf\u8425\u70b9\u7684\u5782\u76f4\u8ddd\u79bb\u5dee\u7684\u5e73\u65b9\u548c\u5c3d\u53ef\u80fd\u5c0f\u3002\u6bcf\u5230\u4e00\u4e2a\u7b49\u9ad8\u7ebf\u5708\uff0c\u4ed6\u90fd\u4f1a\u6839\u636e\u4ed6\u5728\u4e0a\u4e00\u4e2a\u7b49\u9ad8\u7ebf\u7684\u8ddd\u79bb\u7684\u53d8\u5316\u91cf\u6765\u8c03\u8282\u4ed6\u7684\u5728\u7b49\u9ad8\u7ebf\u4e0a\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f7f\u516c\u8def\u6ee1\u8db3\u8981\u6c42\u3002 \u8fd4\u56de\u56de\u5f52\u7cfb\u6570\uff1a def sigmoid(x): return 1.0/(1+math.exp(-x)) def gradAscent(dataMatIn, classLabels): dataMatrix = mat(dataMatIn) #convert to NumPy matrix labelMat = mat(classLabels).transpose() #convert to NumPy matrix m,n = shape(dataMatrix) alpha = 0.001 maxCycles = 500 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations h = sigmoid(dataMatrix*weights) #matrix mult error = (labelMat - h) #vector subtraction weights = weights + alpha * dataMatrix.transpose()* error #matrix mult return weights \u5176\u4e2d\uff0c\u8bef\u5dee\u503c\u4e58\u4ee5\u77e9\u9635\u7684\u8f6c\u79e9\u4ee3\u8868\u68af\u5ea6\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8f7d\u5165\u6570\u636e\u96c6\u5c1d\u8bd5\u753b\u51fa\u6700\u4f73\u62df\u5408\u76f4\u7ebf\uff1a import matplotlib.pyplot as plt def plotBestFit(w): weights = w.getA() # \u5c06\u77e9\u9635\u8f6c\u5316\u4e3a\u6570\u7ec4 dataMat, labelMat = loadDataSet() dataArr = array(dataMat) n = shape(dataArr)[0] x1 = x2 = x3 = x4 = [] for i in range(n): if int(labelMat[i] == 1: x1.append(dataArr[i,1]); y1.append(dataArr[i,2]) else x2.append(dataArr[i,1]); y2.append(dataArr[i,2]) fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(x1, y1, s=30, c='red', markers='s') ax.scatter(x2, y2, s=30, c='green') x = arrange(-3.0, 3.0, 0.1) y = (-weight[0]-weights[1]*x)/weights[2] ax.plot(x, y) plt.xlabel('X1') plt.xlabel('X2') plt.show() \u5982\u679c\u5904\u7406\u5927\u91cf\u6570\u636e\u96c6\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u6279\u91cf\u6570\u636e\u96c6\u4e2d\u7684\u5355\u4e2a\u6570\u636e\u70b9\u8fdb\u884c\u7cfb\u6570\u66f4\u65b0\uff0c\u6216\u8005\u4f7f\u7528\u968f\u673a\u6570\u636e\u96c6\u7684\u6570\u636e\u70b9\uff0c\u5206\u522b\u5982\u4e0b\u6240\u793a\uff1a def stocGradAscentBatch(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 weights = ones(n) for i in range(m): h = sigmoid(sum(dataMatrix[i]*weights)) error = classLabels[i] - h weights = weights + alpha * error * dataMatrix[i] return weights def stocGradAscentRand(dataMatrix, classLabels, numIter=150) m,n = shape(dataMatrix) weights = ones(n) for j in range(numIter) dataIndex = range(m) for i in range(m): alpha = 4/(1.0+j+i)+0.01 # \u8c03\u6574 randIndex = int(random.uniform(0, len(dataIndex))) h = sigmoid(sum(dataMatrix[randIndex]*weights)) error = classLabels[randIndex] - h weights = weights + alpha * error * dataMatrix[randIndex] del(dataIndex[randIndex]) # \u5220\u9664\u5df2\u9009\uff0c\u9632\u6b62\u91cd\u590d\u9009\u53d6 \u7ebf\u6027\u56de\u5f52 \u6811\u56de\u5f52 SVM SVM\uff08Supprot Vector Machines\uff09\u5373\u652f\u6301\u5411\u91cf\u673a\uff0c\u5b8c\u5168\u7406\u89e3\u5176\u7406\u8bba\u77e5\u8bc6\u5bf9\u6570\u5b66\u8981\u6c42\u8f83\u9ad8\uff0c\u4ee5\u7b14\u8005\u7684\u4e8c\u534a\u540a\u5b50\u6c34\u5e73\u4e0d\u8db3\u4ee5\u5b8c\u5168\u5e94\u4ed8\uff0c\u6240\u4ee5\uff0c\u6211\u5c31\u57f9\u517b\u4e0b\u611f\u6027\u8ba4\u8bc6\u5427\u3002 \u4ee5\u4e0b\u5185\u5bb9\u6765\u81ea \u54115\u5c81\u5b69\u5b50\u89e3\u91caSVM \uff1a \u684c\u5b50\u4e0a\u6709\u4e24\u79cd\u989c\u8272\u7684\u7403\uff0c ```{image} ../images/svm1.png :align: center \u6211\u4eec\u9700\u8981\u5728\u4e2d\u95f4\u6446\u4e00\u6839\u68cd\u5b50\u628a\u5b83\u4eec\u5206\u5f00\uff0c ```{image} ../images/svm2.png :align: center \u5b8c\u7f8e\uff0c\u90a3\u4e48\u518d\u52a0\u70b9\u7403\uff0c\u53d1\u73b0\u518d\u627e\u5230\u4e00\u4e2a\u5408\u9002\u4f4d\u7f6e\u7684\u8bdd\u6bd4\u8f83\u96be\u4e86\uff08\u4f46\u4ecd\u7136\u53ef\u4ee5\u627e\u5230\uff09\uff0c ```{image} ../images/svm3.png :align: center SVM\u5c31\u662f\u8bd5\u56fe\u628a\u68cd\u653e\u5728\u6700\u4f73\u4f4d\u7f6e\uff0c\u597d\u8ba9\u5728\u68cd\u7684\u4e24\u8fb9\u6709\u5c3d\u53ef\u80fd\u5927\u7684\u95f4\u9699\uff0c ```{image} ../images/svm4.png :align: center \u8fd9\u6839\u68cd\u4ecd\u7136\u53ef\u4ee5\u5206\u5f00\u5b83\u4eec\uff0c ```{image} ../images/svm5.png :align: center \u5982\u679c\uff0c\u8fd9\u6837\u6446\u5462\uff1f ```{image} ../images/svm6.png :align: center \u4f60\u6012\u62cd\u684c\u5b50\uff0c\u5c06\u7403\u9ad8\u9ad8\u5f39\u8d77\uff0c\u7136\u540e\u5411\u5fcd\u7740\u6c34\u679c\u90a3\u6837\u5728\u7a7a\u4e2d\u5212\u8fc7\u7b14\u76f4\u7684\u4e00\u5200\u3002\u5c31\u8fd9\u6837\u5206\u5f00\u4e86\u3002 ```{image} ../images/svm7.png :align: center \u90a3\u4e00\u77ac\uff0c\u7403\u5728\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u88ab\u5b8c\u7f8e\u5206\u5f00\u4e86\uff0c\u50cf\u8fd9\u6837\u3002 ```{image} ../images/svm8.png :align: center \u518d\u4e4b\u540e\u65e0\u804a\u7684\u5927\u4eba\u4eec\uff0c\u628a\u8fd9\u4e9b\u7403\u53eb\u505a data\uff0c\u628a\u68cd\u5b50 \u53eb\u505a classifier, \u6700\u5927\u95f4\u9699\u7684\u628a\u620f\u53eb\u505aoptimization\uff0c \u62cd\u684c\u5b50\u53eb\u505akernelling, \u90a3\u5f20\u7eb8\u53eb\u505ahyperplane\u3002 \u4ee52\u7ef4\u6570\u636e\u4e3a\u4f8b\uff0c\u5373\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u7528\u76f4\u7ebf\u5206\u5272\uff0c\u4e00\u822c\u5f62\u5f0f\u4e3ay=ax+b\uff0c\u5982\u679c\u4e0d\u53ef\u5206\u5272\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u63d0\u9ad8\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5206\u5272\u7ebf\u53d8\u6210\u4e86\u5206\u5272\u9762\uff08\u8d85\u5e73\u9762\uff09\uff0c\u5199\u4f5c\uff1a |w^T A+b| \u795e\u7ecf\u7f51\u7edc\uff08\u6df1\u5ea6\u5b66\u4e60\uff09 \u5f3a\u5316\u5b66\u4e60 AdaBoost 2.3 \u65e0\u76d1\u7763\u5b66\u4e60 K-\u5747\u503c\u805a\u7c7b Apriori\u5173\u8054\u5206\u6790 FP-growth\u53d1\u73b0\u9ad8\u9891\u9879 2.4 \u6570\u636e\u53ef\u89c6\u5316 \u6570\u636e\u7edf\u8ba1 Pandas Gephi python-graphviz python-matplotlib Echarts plotnine seaborn \u5730\u7406\u4f4d\u7f6e\u8868\u793a \u767e\u5ea6\u5730\u56feAPI MaxMind GeoIP Microsoft Excel 2013 PowerView\u4f7f\u7528\u793a\u4f8b Kartograph 2.5 \u5b66\u4e60\u5de5\u5177 Online GUI Weka brew cask install weka MOA Orange pip3 install orange KNIME pip3 install knime Library Spark MLlib SciKit NLTK pybrain tensorflow pytorch caffe libsvm numpy matplotlib scratch 2.6 \u663e\u5361\u7684\u529b\u91cf \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Ch02"},{"location":"docs2/ch02/#_1","text":"","title":"\u7b2c\u4e8c\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"docs2/ch02/#21-numpy","text":"import numpy as np a = np.arange(1,5) data_type = [('name','S10'), ('height', 'float'), ('age', int)] values = [('Arthur', 1.8, 41), ('Lancelot', 1.9, 38), ('Galahad', 1.7, 38)] b = np.array(values, dtype=data_type) c = np.arange(6,10) # \u7b26\u53f7 np.sign(a) # \u6570\u7ec4\u6700\u5927\u503c a.max() # \u6570\u7ec4\u6700\u5c0f\u503c a.max() # \u533a\u95f4\u5cf0\u5cf0\u503c a.ptp() # \u4e58\u79ef a.prod() # \u7d2f\u79ef a.cumprod() # \u5e73\u5747\u503c a.mean() # \u4e2d\u503c a.median() # \u5dee\u5206 np.diff(a) # \u65b9\u5dee np.var(a) # \u5143\u7d20\u6761\u4ef6\u67e5\u627e\uff0c\u8fd4\u56deindex\u7684array np.where(a>2) # \u8fd4\u56de\u7b2c2\uff0c3\uff0c5\u4e2a\u5143\u7d20\u7684array np.take(a, np.array(1,2,4)) # \u6392\u5e8f np.msort(a) np.sort(b, kind='mergesort', order='height') # \u5747\u5206\uff0c\u5947\u6570\u4e2a\u5143\u7d20\u7684array\u4e0d\u53ef\u5206\u5272\u4e3a\u5076\u6570\u3002 np.split(b,2) # \u521b\u5efa\u5355\u4f4d\u77e9\u9635 np.eye(3) # \u6700\u5c0f\u4e8c\u4e58\uff0c\u53c2\u6570\u4e3a[x,y,degree]\uff0cdegree\u4e3a\u591a\u9879\u5f0f\u7684\u6700\u9ad8\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6240\u6709\u6b21\u5e42\u7684\u7cfb\u6570 np.polyfit(a,c,1)","title":"2.1 numpy \u5feb\u67e5"},{"location":"docs2/ch02/#22","text":"","title":"2.2 \u76d1\u7763\u5b66\u4e60"},{"location":"docs2/ch02/#_2","text":"\u4fe1\u606f\u7684\u4e0d\u7a33\u5b9a\u6027\u4e3a\u71b5\uff08entropy\uff09\uff0c\u800c\u4fe1\u606f\u589e\u76ca\u4e3a\u6709\u65e0\u6837\u672c\u7279\u5f81\u5bf9\u5206\u7c7b\u95ee\u9898\u5f71\u54cd\u7684\u5927\u5c0f\u3002\u6bd4\u5982\uff0c\u629b\u786c\u5e01\u6b63\u53cd\u4e24\u9762\u5404\u670950%\u6982\u7387\uff0c\u6b64\u65f6\u4e0d\u7a33\u5b9a\u6027\u6700\u5927\uff0c\u71b5\u4e3a1\uff1b\u592a\u9633\u660e\u5929\u7167\u5e38\u5347\u8d77\uff0c\u5219\u662f\u5fc5\u7136\uff0c\u6b64\u4e8b\u4e0d\u7a33\u5b9a\u6027\u6700\u5c0f\uff0c\u71b5\u4e3a0\u3002 \u5047\u8bbe\u4e8b\u4ef6X\uff0c\u53d1\u751f\u6982\u7387\u4e3ax\uff0c\u5176\u4fe1\u606f\u671f\u671b\u503c\u5b9a\u4e49\u4e3a\uff1a l(X) = -log_2 x \u6574\u4e2a\u4fe1\u606f\u7684\u71b5\u4e3a\uff1a \\[ H = -\\sum^n_{i=1} log_2 x \\] \u5982\u4f55\u627e\u5230\u6700\u597d\u7684\u5206\u7c7b\u7279\u5f81\uff1a def chooseBestFeatureToSplit(dataSet): numFeatures = len(dataSet[0]) - 1 #the last column is used for the labels baseEntropy = calcShannonEnt(dataSet) bestInfoGain = 0.0; bestFeature = -1 for i in range(numFeatures): #iterate over all the features featList = [example[i] for example in dataSet]#create a list of all the examples of this feature uniqueVals = set(featList) #get a set of unique values newEntropy = 0.0 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) prob = len(subDataSet)/float(len(dataSet)) newEntropy += prob * calcShannonEnt(subDataSet) infoGain = baseEntropy - newEntropy #calculate the info gain; ie reduction in entropy if (infoGain > bestInfoGain): #compare this to the best gain so far bestInfoGain = infoGain #if better than current best, set to best bestFeature = i return bestFeature #returns an integer \u5176\u4e2d\uff0cdataSet\u4e3a\u6240\u6709\u7279\u5f81\u5411\u91cf\uff0ccaclShannonEnt()\u8ba1\u7b97\u7279\u5f81\u5411\u91cf\u7684\u71b5\uff0csplitDataSet()\u5207\u9664\u5411\u91cf\u4e2d\u7684value\u5217\uff1binfoGain\u5373\u4e3a\u4fe1\u606f\u589e\u76ca\uff0cchooseBestFeatureToSplit\u8fd4\u56de\u6700\u597d\u7684\u7279\u5f81\u5411\u91cf\u7d22\u5f15\u503c\u3002","title":"\u4fe1\u606f\u5206\u7c7b\u57fa\u7840"},{"location":"docs2/ch02/#k","text":"kNN\u7684\u7b97\u6cd5\u6a21\u578b\u5982\u4e0b\uff1a \u5bf9\u4e8e\u672a\u77e5\u7c7b\u522b\u5c5e\u6027\u7684\u6570\u636e\u4e14\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f9d\u6b21\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8ba1\u7b97\u5df2\u77e5\u7c7b\u522b\u6570\u636e\u96c6\u4e2d\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb \u6309\u7167\u8ddd\u79bb\u9012\u589e\u4f9d\u6b21\u6392\u5e8f \u9009\u53d6\u4e0e\u5f53\u524d\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684k\u4e2a\u70b9 \u786e\u5b9a\u524dk\u4e2a\u70b9\u6240\u5728\u7c7b\u522b\u7684\u51fa\u73b0\u9891\u7387 \u8fd4\u56de\u524dk\u4e2a\u70b9\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u7c7b\u522b\u4f5c\u4e3a\u5f53\u524d\u70b9\u7684\u9884\u6d4b\u5206\u7c7b \u4ee3\u7801\u53c2\u8003\u5982\u4e0b\uff1a def classify0(inX, dataSet, labels, k): dataSetSize = dataSet.shape[0] diffMat = tile(inX, (dataSetSize,1)) - dataSet sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) distances = sqDistances**0.5 sortedDistIndicies = distances.argsort() classCount={} for i in range(k): voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] \u5176\u4e2d\uff0cinX\u4e3a\u8f93\u5165\u5411\u91cf\uff0cdataSet\u4e3a\u6570\u636e\u96c6\uff0clabels\u4e3a\u6570\u636e\u96c6\u7684\u5206\u7c7b\uff0c\u53ef\u8c03\u3002\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\u4e3ad0 = ((x-x0)**2 + (y-y0)**2)**0.5\u3002 \u6b64\u79cd\u7b97\u6cd5\u7684\u4f18\u70b9\u4e3a\u7cbe\u5ea6\u9ad8\u3001\u5bf9\u5f02\u5e38\u503c\u4e0d\u654f\u611f\u3001\u4f46\u7f3a\u70b9\u4e5f\u6bd4\u8f83\u660e\u663e\uff0c\u5373\u6570\u636e\u91cf\u5927\u65f6\u5f00\u652f\u76f8\u5bf9\u8f83\u5927\uff0c\u9002\u7528\u4e8e\u6570\u503c\uff0d\u6807\u79f0\u578b\u6570\u636e\u3002","title":"K\u90bb\u8fd1\u7b97\u6cd5"},{"location":"docs2/ch02/#_3","text":"\u51b3\u7b56\u6811\u5373\u5217\u51fa\u4e00\u7cfb\u5217\u9009\u62e9\uff0c\u6839\u636e\u8bad\u7ec3\u96c6\u4e2d\u7684\u5927\u91cf\u5f62\u4f3c\uff08A\u3001B\u3001C\uff09\u4ee5\u53ca\u7ed3\u679cD\u7684\u5411\u91cf\u6765\u9884\u6d4b\u65b0\u8f93\u5165\uff08A'\u3001B'\u3001C'\uff09\u7684\u7ed3\u679cD'\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811\uff1a def createTree(dataSet,labels): classList = [example[-1] for example in dataSet] if classList.count(classList[0]) == len(classList): return classList[0] #stop splitting when all of the classes are equal if len(dataSet[0]) == 1: #stop splitting when there are no more features in dataSet return majorityCnt(classList) bestFeat = chooseBestFeatureToSplit(dataSet) bestFeatLabel = labels[bestFeat] myTree = {bestFeatLabel:{}} del(labels[bestFeat]) featValues = [example[bestFeat] for example in dataSet] uniqueVals = set(featValues) for value in uniqueVals: subLabels = labels[:] #copy all of labels, so trees don't mess up existing labels myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value),subLabels) return myTree \u627e\u5230\u5f71\u54cd\u6700\u5927\u7684\u7279\u5f81bestFeat\u540e\uff0c\u518d\u521b\u5efa\u6b64\u7279\u5f81\u4e0b\u7684\u5206\u7c7b\u5411\u91cf\u521b\u5efa\u5b50\u6811\u5411\u91cf\uff0c\u7136\u540e\u5c06bestFeat\u5206\u79bb\u540e\u7ee7\u7eed\u8fed\u4ee3\uff0c\u76f4\u81f3\u6240\u6709\u7279\u5f81\u90fd\u8f6c\u6362\u6210\u51b3\u7b56\u8282\u70b9\u3002 \u539f\u59cb\u6570\u636e\u6bd4\u5982\uff1a no-surfacing flippers fish 1 yes yes yes 2 yes yes yes 3 yes no no 4 no yes no 5 no yes no \u4f1a\u751f\u6210\u5982\u4e0b\u51b3\u7b56\u6811\uff1a no-surfacing? / \\ no/ \\yes fish(no) flippers? / \\ no/ \\yes fish(no) fish(yes) \u8868\u793a\u6210JSON\u683c\u5f0f\uff0c\u5373python\u5b57\u5178\uff1a {'no surfacing':{0:'no',1:{'flippers':{0:'no',1:'yes'}}} \u6784\u5efa\u51b3\u7b56\u6811\u7684\u65b9\u6cd5\u6bd4\u8f83\u591a\uff0c\u4e5f\u53ef\u4f7f\u7528C4.5\u548cCART\u7b97\u6cd5\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u5206\u7c7b\uff1a def classify(inputTree,featLabels,testVec): firstStr = inputTree.keys()[0] secondDict = inputTree[firstStr] featIndex = featLabels.index(firstStr) key = testVec[featIndex] valueOfFeat = secondDict[key] if isinstance(valueOfFeat, dict): classLabel = classify(valueOfFeat, featLabels, testVec) else: classLabel = valueOfFeat return classLabel \u5176\u4e2d\uff0cfeatLabels\u4e3a\u6d4b\u8bd5\u7684\u5224\u65ad\u8282\u70b9\uff0c\u5373\u7279\u5f81\uff0ctestVec\u4e3a\u5176\u503c\uff0c\u6bd4\u5982classify[myTree,\"['no-surfacing','flippers']\",:[1,1]\"]\uff0c\u5982\u6b64\u7ed3\u679c\u4fbf\u4e3a'no'\u3002 \u4f7f\u7528pickle\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u5e8f\u5217\u5316\u5b58\u50a8\uff1a def storeTree(inputTree,filename): import pickle fw = open(filename,'w') pickle.dump(inputTree,fw) fw.close() \u5176\u4e2d\uff0cdump\u53ef\u9009\u534f\u8bae\u4e3a0\uff08ASCII\uff09\uff0c1\uff08BINARY\uff09\uff0c\u9ed8\u8ba4\u4e3a0\uff1b\u8bfb\u53d6\u65f6\u4f7f\u7528pickle.load\uff1b\u540c\u6837\u53ef\u4f7f\u7528dumps\uff0cloads\u76f4\u63a5\u5bf9\u5b57\u7b26\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002 \u6b64\u79cd\u7b97\u6cd5\u8ba1\u7b97\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u5bf9\u4e2d\u95f4\u503c\u7f3a\u5931\u4e0d\u654f\u611f\uff0c\u4f46\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fc7\u62df\u5408\u7684\u95ee\u9898\u3002","title":"\u51b3\u7b56\u6811"},{"location":"docs2/ch02/#_4","text":"\u8d1d\u53f6\u65af\u6a21\u578b\u662f\u57fa\u4e8e\u72ec\u7acb\u6982\u7387\u7edf\u8ba1\u7684\uff0c\u601d\u60f3\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff1a \u603b\u51717\u4e2a\u77f3\u5b50\u5728A\u3001B\u4e24\u4e2a\u6876\u4e2d\uff0cA\u6876\u4e2d\u67092\u9ed12\u767d\uff0cB\u6876\u4e2d\u67092\u9ed11\u767d\u3002\u5df2\u77e5\u6761\u4ef6\u4e3a\u77f3\u5b50\u6765\u81eaB\u6876\uff0c\u90a3\u4e48\u5b83\u662f\u767d\u8272\u77f3\u5b50\u7684\u6982\u7387\u53ef\u8868\u793a\u4e3a\uff1a P(white|B)=P(B|white)P(white)/P(B) \u63a5\u4e0b\u6765\uff0c\u5b9a\u4e49\u4e24\u4e2a\u4e8b\u4ef6A\u3001B\uff0cP(A|B)\u4e0eP(B|A)\u76f8\u4e92\u8f6c\u5316\u7684\u8fc7\u7a0b\u5373\u4e3a\uff1a P(B|A)=P(A|B)P(B)/P(A) \u800c\u6734\u7d20\u8d1d\u53f6\u65af\u53ef\u4ee5\u8fd9\u6837\u63cf\u8ff0\uff1a \u8bbex={a1,a2,...,am}\u4e3a\u5f85\u5206\u7c7b\u9879\uff0ca\u4e3ax\u7684\u7279\u5f81\u5c5e\u6027\uff0c\u7c7b\u522b\u96c6\u5408\u4e3aC={y1,y2,...,ym}\uff0c\u5982\u679cP(yk|x)=max(P(y1|x),P(y2|x),...,P(yn|x))\uff0c\u5219x\u5c5e\u4e8eyk\u3002 \u6574\u4e2a\u7b97\u6cd5\u6838\u5fc3\u5373\u662f\u7b49\u5f0fP(yi|x)=P(x|yi)P(yi)/P(x)\u3002 \u9996\u5148\u6784\u5efa\u4e00\u4e2a\u5206\u7c7b\u8bad\u7ec3\u51fd\u6570\uff08\u4e8c\u5143\u5206\u7c7b\uff09\uff1a def trainNB0(trainMatrix,trainCategory): numTrainDocs = len(trainMatrix) numWords = len(trainMatrix[0]) pBad = sum(trainCategory)/float(numTrainDocs) p0Num = ones(numWords); p1Num = ones(numWords) #change to ones() p0Denom = 2.0; p1Denom = 2.0 #change to 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: p1Num += trainMatrix[i] p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) p1Vect = log(p1Num/p1Denom) #change to log() p0Vect = log(p0Num/p0Denom) #change to log() return p0Vect,p1Vect,pBad \u5176\u4e2d\uff0ctrainMatrix\u4e3a\u6240\u6709\u8bad\u7ec3\u96c6\u4e2d\u7684\u5e03\u5c14\u5411\u91cf\uff0c\u6bd4\u5982\u4e24\u672c\u4e66A\u3001B\uff0c\u5176\u4e2dA\u6709\u4e24\u4e2a\u5355\u8bcdx\u3001y\uff0cB\u6709\u4e24\u4e2a\u5355\u8bcdx\u3001z\uff0c\u5e76\u4e14A\u662f\u597d\u4e66\uff08\u503c\u8ba1\u4e3a0\uff09\uff0cB\u662f\u70c2\u4e66\uff08\u503c\u8ba1\u4e3a0\uff09\uff0c\u628a\u6240\u6709\u5355\u8bcd\u8fdb\u884c\u6392\u5e8f\u540e\u5f97\u5411\u91cf['x','y','z']\uff0c\u5219A\u7684Matrix\u53ef\u8868\u793a\u4e3a[1,1,0]\uff0cB\u7684\u4e3a[1,0,1]\uff0c\u6240\u4ee5\u6b64\u51fd\u6570\u4e2d\u7684trainMatrix\u5373[[1,1,0],[1,0,1]]\uff0ctrainCategory\u4e3a[0,1]\u3002 \u51fd\u6570\u8fd4\u56de\u7684\u4e3a\u6982\u7387\u96c6\u7684\u5411\u91cf\u3002 \u5206\u7c7b\u51fd\u6570\uff1a def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1): p1 = sum(vec2Classify * p1Vec) + log(pClass1) #element-wise mult p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1) if p1 > p0: return 1 else: return 0 vec2Classify\u5373\u4e3a\u8981\u5206\u7c7b\u7684\u5411\u91cf\uff0c\u5f62\u5982trainMatrix\uff0c\u968f\u540e\u7684\u4e09\u4e2a\u53c2\u6570\u4e3atrainNB0\u6240\u8fd4\u56de\u3002p1\u3001p0\u53ef\u4ee5\u7406\u89e3\u4e3a\u671f\u671b\u6982\u7387\u503c\uff0c\u6bd4\u8f83\u4e24\u8005\u5927\u5c0f\u5373\u53ef\u5212\u5206\u3002 \u6d4b\u8bd5\u7528\u4f8b\uff1a def testingNB(): listOPosts,listClasses = loadDataSet() myVocabList = createVocabList(listOPosts) trainMat=[] for postinDoc in listOPosts: trainMat.append(setOfWords2Vec(myVocabList, postinDoc)) p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses)) testEntry = ['love', 'my', 'dalmation'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) testEntry = ['stupid', 'garbage'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) \u6574\u4f53\u6765\u8bf4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u65b9\u6cd5\u5728\u6570\u636e\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u662f\u5bf9\u6570\u636e\u8f93\u5165\u6bd4\u8f83\u654f\u611f\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"docs2/ch02/#logistic","text":"\u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u7ebf\u6027\u56de\u5f52\u662f\u5229\u7528\u79f0\u4e3a\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u7684\u6700\u5c0f\u4e8c\u4e58\u51fd\u6570\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u8fdb\u884c\u5efa\u6a21\u7684\u4e00\u79cd\u56de\u5f52\u5206\u6790\u3002\u8fd9\u79cd\u51fd\u6570\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u79f0\u4e3a\u56de\u5f52\u7cfb\u6570\u7684\u6a21\u578b\u53c2\u6570\u7684\u7ebf\u6027\u7ec4\u5408\u3002\u53ea\u6709\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u60c5\u51b5\u79f0\u4e3a\u7b80\u5355\u56de\u5f52\uff0c\u5927\u4e8e\u4e00\u4e2a\u81ea\u53d8\u91cf\u60c5\u51b5\u7684\u53eb\u505a\u591a\u5143\u56de\u5f52\u3002\uff08 \u7ef4\u57fa\u767e\u79d1 \uff09 \u5148\u4ecb\u7ecd\u4e24\u4e2a\u91cd\u8981\u7684\u6570\u5b66\u6982\u5ff5\u3002 \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5219 \u6700\u5c0f\u4e8c\u4e58\u6cd5\uff08\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5\uff09\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f\u3002\u5b83\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002 \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e\uff0c\u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f\u3002 \u793a\u4f8b1 \u6709\u56db\u4e2a\u6570\u636e\u70b9(1,6)\u3001(2,5)\u3001(3,7)\u3001(4,10)\uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u6761\u76f4\u7ebfy=a+bx\u4e0e\u8fd9\u56db\u4e2a\u70b9\u6700\u5339\u914d\u3002 a+1b=6 a+2b=5 a+3b=7 a+4b=10 \u91c7\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u4f7f\u7b49\u53f7\u4e24\u8fb9\u7684\u65b9\u5dee\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e5f\u5c31\u662f\u627e\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff1a S(a,b) = [6-(a+1b)]^2+[5-(a+2b)]^2+[7-(a+3b)]^2+[10-(a+4b)]^2 \u7136\u540e\u5bf9S(a,b)\u6c42a,b\u7684\u504f\u5bfc\u6570\uff0c\u4f7f\u5176\u4e3a0\u5f97\u5230\uff1a \\cfrac{{\\partial}S}{{\\partial}a} = 0 = 8a+20b-56 \\cfrac{{\\partial}S}{{\\partial}b} = 0 = 20a+60b-154 \u8fd9\u6837\u5c31\u89e3\u51fa\uff1a a=3.5,b=1.4 \u6240\u4ee5\u76f4\u7ebfy=3.5+1.4x\u662f\u6700\u4f73\u7684\u3002 \u51fd\u6570\u8868\u793a \\min_{\\vec{b}}{\\sum^n_{i=1}}(y_m-y_i)^2 \u6b27\u51e0\u91cc\u5fb7\u8868\u793a \\min_{ \\vec{b} } \\| \\vec{y}_{m} ( \\vec{b} ) - \\vec{y} \\|_{2} \u7ebf\u6027\u51fd\u6570\u6a21\u578b \u5178\u578b\u7684\u4e00\u7c7b\u51fd\u6570\u6a21\u578b\u662f\u7ebf\u6027\u51fd\u6570\u6a21\u578b\u3002\u6700\u7b80\u5355\u7684\u7ebf\u6027\u5f0f\u662f y = b_0 + b_1 t \u5199\u6210\u77e9\u9635\u5f0f\uff0c\u4e3a \\min_{b_0,b_1}\\left\\|\\begin{pmatrix}1 & t_1 \\\\ \\vdots & \\vdots \\\\ 1 & t_n \\end{pmatrix}\\begin{pmatrix} b_0\\\\ b_1\\end{pmatrix} - \\begin{pmatrix} y_1 \\\\ \\vdots \\\\ y_{n}\\end{pmatrix}\\right\\|_{2} = \\min_b\\|Ab-Y\\|_2 \u76f4\u63a5\u7ed9\u51fa\u8be5\u5f0f\u7684\u53c2\u6570\u89e3\uff1a b_1 = \\frac{\\sum_{i=1}^n t_iy_i - n \\cdot \\bar t \\bar y}{\\sum_{i=1}^n t_i^2- n \\cdot (\\bar t)^2} b_0 = \\bar y - b_1 \\bar t \u5176\u4e2d \\bar t = \\frac{1}{n} \\sum_{i=1}^n t_i \u4e3at\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\u3002\u4e5f\u53ef\u89e3\u5f97\u5982\u4e0b\u5f62\u5f0f\uff1a b_1 = \\frac{\\sum_{i=1}^n (t_i - \\bar t)(y_i - \\bar y)}{\\sum_{i=1}^n (t_i - \\bar t)^2} \u793a\u4f8b2 \u968f\u673a\u9009\u5b9a10\u8258\u6218\u8230\uff0c\u5e76\u5206\u6790\u5b83\u4eec\u7684\u957f\u5ea6\u4e0e\u5bbd\u5ea6\uff0c\u5bfb\u627e\u5b83\u4eec\u957f\u5ea6\u4e0e\u5bbd\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u7531\u4e0b\u9762\u7684\u63cf\u70b9\u56fe\u53ef\u4ee5\u76f4\u89c2\u5730\u770b\u51fa\uff0c\u4e00\u8258\u6218\u8230\u7684\u957f\u5ea6\uff08t\uff09\u4e0e\u5bbd\u5ea6\uff08y\uff09\u57fa\u672c\u5448\u7ebf\u6027\u5173\u7cfb\u3002\u6563\u70b9\u56fe\u5982\u4e0b\uff1a ```{image} ../images/04-02.png :align: center \u4ee5\u4e0b\u56fe\u8868\u5217\u51fa\u4e86\u5404\u6218\u8230\u7684\u6570\u636e\uff0c\u968f\u540e\u6b65\u9aa4\u662f\u91c7\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u786e\u5b9a\u4e24\u53d8\u91cf\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u3002 ```{image} ../images/04-03.png :align: center \u4eff\u7167\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50 \\bar t = \\frac {\\sum_{i=1}^n t_i}{n} = \\frac {1678}{10} = 167{.}8 \u5e76\u5f97\u5230\u76f8\u5e94\u7684 \\bar y = 18{.}41 \u7136\u540e\u786e\u5b9ab1 b_1 = \\frac{\\sum_{i=1}^n (t_i- \\bar {t})(y_i - \\bar y)}{\\sum_{i=1}^n (t_i- \\bar t)^2} = \\frac{3287{.}820} {20391{.}60} = 0{.}1612 \\; \u53ef\u4ee5\u770b\u51fa\uff0c\u6218\u8230\u7684\u957f\u5ea6\u6bcf\u53d8\u53161m\uff0c\u76f8\u5bf9\u5e94\u7684\u5bbd\u5ea6\u4fbf\u8981\u53d8\u531616cm\u3002\u5e76\u7531\u4e0b\u5f0f\u5f97\u5230\u5e38\u6570\u9879b0\uff1a b_0 = \\bar y - b_1 \\bar t = 18{.}41 - 0{.}1612 \\cdot 167{.}8 = -8{.}6394 \u53ef\u4ee5\u770b\u51fa\u70b9\u7684\u62df\u5408\u975e\u5e38\u597d\uff0c\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u76f8\u5173\u6027\u5927\u7ea6\u4e3a96.03\uff05\u3002 \u5229\u7528Matlab\u5f97\u5230\u62df\u5408\u76f4\u7ebf\uff1a ```{image} ../images/04-04.png :align: center **Sigmoid\u51fd\u6570** Sigmoid\u51fd\u6570\u5177\u6709\u5355\u4f4d\u9636\u8dc3\u51fd\u6570\u7684\u6027\u8d28\uff0c\u516c\u5f0f\u8868\u793a\u4e3a\uff1a ```{math} \\sigma (z)=\\cfrac{1}{1+e^{-z}} ```{image} ../images/04-01.png :align: center \u6211\u4eec\u5c06\u8f93\u5165\u8bb0\u4e3az\uff0c\u6709\u4e0b\u9762\u7684\u516c\u5f0f\u5f97\u51fa\uff1a ```{math} z=w_0 x_0 + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u4f7f\u7528\u5411\u91cf\u5199\u6cd5\uff1a z=w^T x \u5176\u4e2d\u5411\u91cfx\u662f\u5206\u7c7b\u5668\u7684\u8f93\u5165\u6570\u636e\uff0c\u5411\u91cfw\u5c31\u662f\u6211\u4eec\u8981\u627e\u5230\u7684\u6700\u4f73\u7cfb\u6570\u3002 \u57fa\u4e8e\u4f18\u5316\u65b9\u6cd5\u786e\u5b9a\u56de\u5f52\u7cfb\u6570 \u68af\u5ea6\u4e0a\u5347/\u4e0b\u964d\u6cd5 \u68af\u5ea6\u4e0a\u5347\u6cd5/\u4e0b\u964d\u6cd5\u7684\u601d\u60f3\u662f\uff1a\u8981\u627e\u5230\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u6cbf\u7740\u8be5\u51fd\u6570\u7684\u68af\u5ea6\u65b9\u5411\u63a2\u5bfb\uff0c\u51fd\u6570f(x,y)\u7684\u68af\u5ea6\u5982\u4e0b\u8868\u793a\uff1a {\\nabla}f(x,y)=\\begin{pmatrix} \\cfrac{{\\partial}f(x,y)}{{\\partial}x} \\\\ \\cfrac{{\\partial}f(x,y)}{{\\partial}y}\\end{pmatrix} \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u6b64\u7b97\u6cd5\uff1a \u4ece\u524d\u6709\u4e00\u5ea7\u5c71\uff0c\u4e00\u4e2a\u61d2\u4eba\u8981\u722c\u5c71\uff0c\u4ed6\u4ece\u5c71\u811a\u4e0b\u7684\u4efb\u610f\u4f4d\u7f6e\u5411\u5c71\u9876\u51fa\u53d1\uff0c\u5e76\u4e14\u77e5\u9053\u7b49\u9ad8\u7ebf\u56fe\u7684\u6bcf\u4e2a\u73af\u4e0a\u90fd\u6709\u4e00\u4e2a\u5bbf\u8425\u70b9\uff0c\u4ed6\u5e0c\u671b\u5728\u8fd9\u4e9b\u5bbf\u8425\u70b9\u4e4b\u95f4\u4fee\u5efa\u4e00\u6761\u7b14\u76f4\u7684\u8def\uff0c\u5e76\u4e14\u8def\u5230\u4e24\u65c1\u7684\u5bbf\u8425\u70b9\u7684\u5782\u76f4\u8ddd\u79bb\u5dee\u7684\u5e73\u65b9\u548c\u5c3d\u53ef\u80fd\u5c0f\u3002\u6bcf\u5230\u4e00\u4e2a\u7b49\u9ad8\u7ebf\u5708\uff0c\u4ed6\u90fd\u4f1a\u6839\u636e\u4ed6\u5728\u4e0a\u4e00\u4e2a\u7b49\u9ad8\u7ebf\u7684\u8ddd\u79bb\u7684\u53d8\u5316\u91cf\u6765\u8c03\u8282\u4ed6\u7684\u5728\u7b49\u9ad8\u7ebf\u4e0a\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f7f\u516c\u8def\u6ee1\u8db3\u8981\u6c42\u3002 \u8fd4\u56de\u56de\u5f52\u7cfb\u6570\uff1a def sigmoid(x): return 1.0/(1+math.exp(-x)) def gradAscent(dataMatIn, classLabels): dataMatrix = mat(dataMatIn) #convert to NumPy matrix labelMat = mat(classLabels).transpose() #convert to NumPy matrix m,n = shape(dataMatrix) alpha = 0.001 maxCycles = 500 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations h = sigmoid(dataMatrix*weights) #matrix mult error = (labelMat - h) #vector subtraction weights = weights + alpha * dataMatrix.transpose()* error #matrix mult return weights \u5176\u4e2d\uff0c\u8bef\u5dee\u503c\u4e58\u4ee5\u77e9\u9635\u7684\u8f6c\u79e9\u4ee3\u8868\u68af\u5ea6\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8f7d\u5165\u6570\u636e\u96c6\u5c1d\u8bd5\u753b\u51fa\u6700\u4f73\u62df\u5408\u76f4\u7ebf\uff1a import matplotlib.pyplot as plt def plotBestFit(w): weights = w.getA() # \u5c06\u77e9\u9635\u8f6c\u5316\u4e3a\u6570\u7ec4 dataMat, labelMat = loadDataSet() dataArr = array(dataMat) n = shape(dataArr)[0] x1 = x2 = x3 = x4 = [] for i in range(n): if int(labelMat[i] == 1: x1.append(dataArr[i,1]); y1.append(dataArr[i,2]) else x2.append(dataArr[i,1]); y2.append(dataArr[i,2]) fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(x1, y1, s=30, c='red', markers='s') ax.scatter(x2, y2, s=30, c='green') x = arrange(-3.0, 3.0, 0.1) y = (-weight[0]-weights[1]*x)/weights[2] ax.plot(x, y) plt.xlabel('X1') plt.xlabel('X2') plt.show() \u5982\u679c\u5904\u7406\u5927\u91cf\u6570\u636e\u96c6\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u6279\u91cf\u6570\u636e\u96c6\u4e2d\u7684\u5355\u4e2a\u6570\u636e\u70b9\u8fdb\u884c\u7cfb\u6570\u66f4\u65b0\uff0c\u6216\u8005\u4f7f\u7528\u968f\u673a\u6570\u636e\u96c6\u7684\u6570\u636e\u70b9\uff0c\u5206\u522b\u5982\u4e0b\u6240\u793a\uff1a def stocGradAscentBatch(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 weights = ones(n) for i in range(m): h = sigmoid(sum(dataMatrix[i]*weights)) error = classLabels[i] - h weights = weights + alpha * error * dataMatrix[i] return weights def stocGradAscentRand(dataMatrix, classLabels, numIter=150) m,n = shape(dataMatrix) weights = ones(n) for j in range(numIter) dataIndex = range(m) for i in range(m): alpha = 4/(1.0+j+i)+0.01 # \u8c03\u6574 randIndex = int(random.uniform(0, len(dataIndex))) h = sigmoid(sum(dataMatrix[randIndex]*weights)) error = classLabels[randIndex] - h weights = weights + alpha * error * dataMatrix[randIndex] del(dataIndex[randIndex]) # \u5220\u9664\u5df2\u9009\uff0c\u9632\u6b62\u91cd\u590d\u9009\u53d6","title":"Logistic\u56de\u5f52"},{"location":"docs2/ch02/#_5","text":"","title":"\u7ebf\u6027\u56de\u5f52"},{"location":"docs2/ch02/#_6","text":"","title":"\u6811\u56de\u5f52"},{"location":"docs2/ch02/#svm","text":"SVM\uff08Supprot Vector Machines\uff09\u5373\u652f\u6301\u5411\u91cf\u673a\uff0c\u5b8c\u5168\u7406\u89e3\u5176\u7406\u8bba\u77e5\u8bc6\u5bf9\u6570\u5b66\u8981\u6c42\u8f83\u9ad8\uff0c\u4ee5\u7b14\u8005\u7684\u4e8c\u534a\u540a\u5b50\u6c34\u5e73\u4e0d\u8db3\u4ee5\u5b8c\u5168\u5e94\u4ed8\uff0c\u6240\u4ee5\uff0c\u6211\u5c31\u57f9\u517b\u4e0b\u611f\u6027\u8ba4\u8bc6\u5427\u3002 \u4ee5\u4e0b\u5185\u5bb9\u6765\u81ea \u54115\u5c81\u5b69\u5b50\u89e3\u91caSVM \uff1a \u684c\u5b50\u4e0a\u6709\u4e24\u79cd\u989c\u8272\u7684\u7403\uff0c ```{image} ../images/svm1.png :align: center \u6211\u4eec\u9700\u8981\u5728\u4e2d\u95f4\u6446\u4e00\u6839\u68cd\u5b50\u628a\u5b83\u4eec\u5206\u5f00\uff0c ```{image} ../images/svm2.png :align: center \u5b8c\u7f8e\uff0c\u90a3\u4e48\u518d\u52a0\u70b9\u7403\uff0c\u53d1\u73b0\u518d\u627e\u5230\u4e00\u4e2a\u5408\u9002\u4f4d\u7f6e\u7684\u8bdd\u6bd4\u8f83\u96be\u4e86\uff08\u4f46\u4ecd\u7136\u53ef\u4ee5\u627e\u5230\uff09\uff0c ```{image} ../images/svm3.png :align: center SVM\u5c31\u662f\u8bd5\u56fe\u628a\u68cd\u653e\u5728\u6700\u4f73\u4f4d\u7f6e\uff0c\u597d\u8ba9\u5728\u68cd\u7684\u4e24\u8fb9\u6709\u5c3d\u53ef\u80fd\u5927\u7684\u95f4\u9699\uff0c ```{image} ../images/svm4.png :align: center \u8fd9\u6839\u68cd\u4ecd\u7136\u53ef\u4ee5\u5206\u5f00\u5b83\u4eec\uff0c ```{image} ../images/svm5.png :align: center \u5982\u679c\uff0c\u8fd9\u6837\u6446\u5462\uff1f ```{image} ../images/svm6.png :align: center \u4f60\u6012\u62cd\u684c\u5b50\uff0c\u5c06\u7403\u9ad8\u9ad8\u5f39\u8d77\uff0c\u7136\u540e\u5411\u5fcd\u7740\u6c34\u679c\u90a3\u6837\u5728\u7a7a\u4e2d\u5212\u8fc7\u7b14\u76f4\u7684\u4e00\u5200\u3002\u5c31\u8fd9\u6837\u5206\u5f00\u4e86\u3002 ```{image} ../images/svm7.png :align: center \u90a3\u4e00\u77ac\uff0c\u7403\u5728\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u88ab\u5b8c\u7f8e\u5206\u5f00\u4e86\uff0c\u50cf\u8fd9\u6837\u3002 ```{image} ../images/svm8.png :align: center \u518d\u4e4b\u540e\u65e0\u804a\u7684\u5927\u4eba\u4eec\uff0c\u628a\u8fd9\u4e9b\u7403\u53eb\u505a data\uff0c\u628a\u68cd\u5b50 \u53eb\u505a classifier, \u6700\u5927\u95f4\u9699\u7684\u628a\u620f\u53eb\u505aoptimization\uff0c \u62cd\u684c\u5b50\u53eb\u505akernelling, \u90a3\u5f20\u7eb8\u53eb\u505ahyperplane\u3002 \u4ee52\u7ef4\u6570\u636e\u4e3a\u4f8b\uff0c\u5373\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u7528\u76f4\u7ebf\u5206\u5272\uff0c\u4e00\u822c\u5f62\u5f0f\u4e3ay=ax+b\uff0c\u5982\u679c\u4e0d\u53ef\u5206\u5272\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u63d0\u9ad8\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5206\u5272\u7ebf\u53d8\u6210\u4e86\u5206\u5272\u9762\uff08\u8d85\u5e73\u9762\uff09\uff0c\u5199\u4f5c\uff1a |w^T A+b|","title":"SVM"},{"location":"docs2/ch02/#_7","text":"","title":"\u795e\u7ecf\u7f51\u7edc\uff08\u6df1\u5ea6\u5b66\u4e60\uff09"},{"location":"docs2/ch02/#_8","text":"","title":"\u5f3a\u5316\u5b66\u4e60"},{"location":"docs2/ch02/#adaboost","text":"","title":"AdaBoost"},{"location":"docs2/ch02/#23","text":"","title":"2.3 \u65e0\u76d1\u7763\u5b66\u4e60"},{"location":"docs2/ch02/#k-","text":"","title":"K-\u5747\u503c\u805a\u7c7b"},{"location":"docs2/ch02/#apriori","text":"","title":"Apriori\u5173\u8054\u5206\u6790"},{"location":"docs2/ch02/#fp-growth","text":"","title":"FP-growth\u53d1\u73b0\u9ad8\u9891\u9879"},{"location":"docs2/ch02/#24","text":"","title":"2.4 \u6570\u636e\u53ef\u89c6\u5316"},{"location":"docs2/ch02/#_9","text":"Pandas Gephi python-graphviz python-matplotlib Echarts plotnine seaborn","title":"\u6570\u636e\u7edf\u8ba1"},{"location":"docs2/ch02/#_10","text":"\u767e\u5ea6\u5730\u56feAPI MaxMind GeoIP Microsoft Excel 2013 PowerView\u4f7f\u7528\u793a\u4f8b Kartograph","title":"\u5730\u7406\u4f4d\u7f6e\u8868\u793a"},{"location":"docs2/ch02/#25","text":"","title":"2.5 \u5b66\u4e60\u5de5\u5177"},{"location":"docs2/ch02/#online","text":"","title":"Online"},{"location":"docs2/ch02/#gui","text":"Weka brew cask install weka MOA Orange pip3 install orange KNIME pip3 install knime","title":"GUI"},{"location":"docs2/ch02/#library","text":"Spark MLlib SciKit NLTK pybrain tensorflow pytorch caffe libsvm numpy matplotlib scratch","title":"Library"},{"location":"docs2/ch02/#26","text":"\\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"2.6 \u663e\u5361\u7684\u529b\u91cf"},{"location":"docs3/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Page2"},{"location":"docs3/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"docs3/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"docs3/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}